
package server.activation;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;
import java.util.concurrent.Future;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "ActivationService", targetNamespace = "http://activation.server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ActivationService {


    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<server.activation.CreateCoordinationContextResponse>
     */
    @WebMethod(operationName = "createCoordinationContext")
    @RequestWrapper(localName = "createCoordinationContext", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContext")
    @ResponseWrapper(localName = "createCoordinationContextResponse", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContextResponse")
    public Response<CreateCoordinationContextResponse> createCoordinationContextAsync(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            CoordinationContext arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            int arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createCoordinationContext")
    @RequestWrapper(localName = "createCoordinationContext", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContext")
    @ResponseWrapper(localName = "createCoordinationContextResponse", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContextResponse")
    public Future<?> createCoordinationContextAsync(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            CoordinationContext arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            int arg2,
            @WebParam(name = "asyncHandler", targetNamespace = "")
            AsyncHandler<CreateCoordinationContextResponse> asyncHandler);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns server.activation.CoordinationContext
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCoordinationContext", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContext")
    @ResponseWrapper(localName = "createCoordinationContextResponse", targetNamespace = "http://activation.server/", className = "server.activation.CreateCoordinationContextResponse")
    public CoordinationContext createCoordinationContext(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            CoordinationContext arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            int arg2);

}
